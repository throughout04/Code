import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

import static java.lang.Math.abs;


public class Main {
    static int N=110;
    static int[][]g=new int[N][N];
    static int[][]count=new int[N][N];

    static int n=0;
    static int m=0;
    static Queue<location> q=new LinkedList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        String[] s = reader.readLine().split(" ");
        n=Integer.parseInt(s[0]);
        m=Integer.parseInt(s[1]);
        for (int i=1;i<=n;i++){
            String[] inputs = reader.readLine().split(" ");
           for (int j=1;j<=m;j++){
               g[i][j]=Integer.parseInt(inputs[j-1]);
           }
        }
        bfs(1,1);
        System.out.println(count[n][m]);
        writer.flush();
        writer.close();
        reader.close();
    }

    private static void bfs(int x,int y) {
        q.add(new location(x, y));
        while (!q.isEmpty()) {
            location l = q.poll();
            int tx = l.x;
            int ty = l.y;
            int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
            for (int i = 0; i < 4; i++) {
                int nx = tx + dir[i][1];
                int ny = ty + dir[i][0];
                if (nx >= 1 && ny >= 1 && nx <= n && ny <= m && g[nx][ny]==0) {
                    g[nx][ny]=1;
                    count[nx][ny] = count[tx][ty] + 1;
                    q.add(new location(nx, ny));
                }
            }
        }
    }

}
    class location {
        int x;
        int y;

        public location(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
