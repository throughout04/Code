import java.util.Scanner;

public class Main {
    static final int N=100010;

    static int[] p = new int[N];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        for (int i=1;i<=n;i++){                 //并查集的根节点：自己的父节点是自己；最开始每个节点都是父节点
            p[i]=i;
        }

        for (int i=0;i<m;i++){
            String op = scanner.next();
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            if (op.equals("M")){
                p[find(a)]=find(b);         //find(x):查找x的根节点，p[x]是x的父节点
            }else{
                if (find(a)==find(b)){
                    System.out.println("Yes");
                }else{
                    System.out.println("No");
                }
            }
        }
    }

    private static int find(int b) {
        //路径压缩，找到根节点
        if (p[b]!=b)p[b]=find(p[b]);        //p[b]是b的父节点，如果不是b的父节点，就继续向上找；目的是实现b的父节点就是b的祖宗节点。
        // 此处会出现递归调用，一开始会自下往上的寻找自己的根节点，最上面的回答(根节点)会依次传递给下面,所以此时所有子节点的根节点全部统一
        //类似孙子提出问题:我的祖宗是谁，孙子会问儿子，儿子问我，我问父亲....最终祖宗回答祖宗的儿子，祖宗的儿子依次往下传，直到传给孙子。
        return p[b];
    }
}
